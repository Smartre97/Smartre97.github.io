{
    "version": "https://jsonfeed.org/version/1",
    "title": "探赜·索隐",
    "subtitle": "菜就应该多努力",
    "icon": "https://github.com/Smartre97/Smartre97.github.io/assets/favicon.ico",
    "description": "=菜就应该多努力=",
    "home_page_url": "https://github.com/Smartre97/Smartre97.github.io",
    "items": [
        {
            "id": "https://github.com/Smartre97/Smartre97.github.io/2023/07/28/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E4%B8%8Egit/",
            "url": "https://github.com/Smartre97/Smartre97.github.io/2023/07/28/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E4%B8%8Egit/",
            "title": "虚幻引擎与Git",
            "date_published": "2023-07-28T05:21:48.000Z",
            "content_html": "<p>一篇关于如何使用 Git 对 UnrealEngine5 项目进行版本控制和多人协同工作的基本教学</p>\n<h1 id=\"前期准备\"><a class=\"anchor\" href=\"#前期准备\">#</a> 前期准备</h1>\n<h2 id=\"安装所需工具\"><a class=\"anchor\" href=\"#安装所需工具\">#</a> 安装所需工具</h2>\n<p>Git：不多解释 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZC93aW4=\">跳转下载</span><br />\n Gitlfs：使 Git 能够转存较大的文件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtbGZzLmNvbS8=\">跳转下载</span><br />\n Github desktop：一款使 Git 操作更直观、可以一定程度上减少使用代码的图形化软件。<br />\n对 Git 新手十分友好<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXNrdG9wLmdpdGh1Yi5jb20v\">跳转下载</span><br />\n（注：如果无法正确打开相关网页，你可能需要一点魔法）</p>\n<h2 id=\"注册github账号\"><a class=\"anchor\" href=\"#注册github账号\">#</a> 注册 Github 账号</h2>\n<p>前往 Github 官网注册你的个人账号 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLw==\">github 官网</span><br />\n（注：如果网页打不开是国内正常现象）</p>\n<h1 id=\"本地配置\"><a class=\"anchor\" href=\"#本地配置\">#</a> 本地配置</h1>\n<h2 id=\"配置git初始地址\"><a class=\"anchor\" href=\"#配置git初始地址\">#</a> 配置 Git 初始地址</h2>\n<p>如果你已经安装好 Git，此时在桌面上单击鼠标右键，将会存在以下两个选项（如图）：<br />\n<img data-src=\"https://i.imgtg.com/2023/07/28/OirxAr.png\" alt=\"图2\" /><br />\n 其中，Git bash 为 Git 控制台，之后将会十分重要<br />\n点击 Git bash，分别输入以下两行指令，按 ENTER，完成初始化配置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的github用户名\"</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email 你注册Git所用的邮箱</pre></td></tr></table></figure><p>同时输入以下指令完成 Git LFS 的初始化</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> lfs <span class=\"token function\">install</span></pre></td></tr></table></figure><h2 id=\"配置虚幻引擎\"><a class=\"anchor\" href=\"#配置虚幻引擎\">#</a> 配置虚幻引擎</h2>\n<h3 id=\"创建版本控制\"><a class=\"anchor\" href=\"#创建版本控制\">#</a> 创建版本控制</h3>\n<p>打开你准备进行版本控制 / 多人协同的虚幻 5 工程项目<br />\n（如果担心不正常的操作造成文件丢失，请先提前备份项目或开一个新项目用于实验）。</p>\n<p>点击右下角 “版本控制”-“连接到版本控制”<br />\n 提供方选择 Git（beta 版）<br />\nGit 路径选择为 Git.exe 的路径（一般在你下载的 Git 路径目录下的 bin 文件夹中）<br />\n勾选 “添加一个.Gitattributes 文件启用 Git LFS”<br />\n 点击 “用 Git 初始化项目”<br />\n<img data-src=\"https://i.imgtg.com/2023/07/28/OiAgvq.png\" alt=\"图3\" /></p>\n<h3 id=\"提交文件\"><a class=\"anchor\" href=\"#提交文件\">#</a> 提交文件</h3>\n<p>可点击右下角 “版本控制”，选择 “提交内容”，此操作会将所有文件提交到本地仓库。<br />\n之后的每次修改可选择 “签出已修改文件”</p>\n<h2 id=\"github-desktop添加本地仓库与初始化\"><a class=\"anchor\" href=\"#github-desktop添加本地仓库与初始化\">#</a> GitHub Desktop 添加本地仓库与初始化</h2>\n<p>打开 GitHub Desktop，添加本地储存库 - 选择你的虚幻项目文件夹<br />\n在出现的弹窗中选择 “初始化 Git LFS”<br />\n 打开 Git bash，输入以下指令进入该文件夹</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"项目文件路径\"</span></pre></td></tr></table></figure><p>经过进入后会看到显示该路径<br />\n输入以下指令使 Git LFS 能转存相关文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> lfs track <span class=\"token string\">\".uasset\"</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> lfs track <span class=\"token string\">\".umap\"</span></pre></td></tr></table></figure><p>成功后会出现 Tracking</p>\n<h1 id=\"github配置\"><a class=\"anchor\" href=\"#github配置\">#</a> Github 配置</h1>\n<h2 id=\"创建一个仓库\"><a class=\"anchor\" href=\"#创建一个仓库\">#</a> 创建一个仓库</h2>\n<p>你可以在左侧挡泥板的 “Top Repositories” 右边点击<strong> New</strong> 以创建你的第一个空白远程仓库<br />\n此时可自由编辑名称、描述、是否对外开放，“Add .gitignore” 可选择为 “UnrealEngine”<br />\n（私人项目一般不建议对外开放，关于协同可以稍后为队友开放权限）<br />\n<img data-src=\"https://i.imgtg.com/2023/07/28/OiAbza.png\" alt=\"图1\" /></p>\n<h2 id=\"创建ssh连接\"><a class=\"anchor\" href=\"#创建ssh连接\">#</a> 创建 ssh 连接</h2>\n<p>由于国内 https 连接时长会无法正常范围，导致项目无法正确提交到云端或下载<br />\n此时则需要使用 ssh 进行连接</p>\n<h3 id=\"进入ssh文件夹\"><a class=\"anchor\" href=\"#进入ssh文件夹\">#</a> 进入 ssh 文件夹</h3>\n<p>打开 Git bash</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/.ssh</pre></td></tr></table></figure><p>若没有成功进入，则说明你没有 ssh 文件夹，可以自行在 C:\\Users\\ 用户名中创建文件夹，命名为 “.ssh”</p>\n<h3 id=\"创建本地-ssh\"><a class=\"anchor\" href=\"#创建本地-ssh\">#</a> 创建本地 ssh</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> “创建github账号的邮箱”</pre></td></tr></table></figure><p>随后会要求你创建密码与确认密码。这里可以不做输入，Entre 进入下一步。直到弹出<br />\n +—[RSA 4096]—-+<br />\n| .=o=|<br />\n| . . B |<br />\n| o + * .|<br />\n| . _ =oo+ |<br />\n| So.B +A+ |<br />\n| .o.B.o.o|<br />\n| .o o+o.|<br />\n| .<em>+B.</em>|<br />\n| .OoBo|<br />\n+—-[SHA256]—–+</p>\n<h3 id=\"获取ssh-key\"><a class=\"anchor\" href=\"#获取ssh-key\">#</a> 获取 ssh -key</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">ls</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> id_rsa.pub</pre></td></tr></table></figure><p>此时会生成一大串内容，那就是你的 ssh key，将其全部复制</p>\n<h3 id=\"在github中进行配置\"><a class=\"anchor\" href=\"#在github中进行配置\">#</a> 在 Github 中进行配置</h3>\n<p>进入 Github - 设置 - SSH and GPG keys<br />\n 选择 New key<br />\ntitle 名字随便取，将刚刚复制的 ssh key 粘贴到下方空白处<br />\n注：不要随意泄露你的 ssh key</p>\n<h3 id=\"验证是否配置成功\"><a class=\"anchor\" href=\"#验证是否配置成功\">#</a> 验证是否配置成功</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com</pre></td></tr></table></figure><p>出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</p>\n<h2 id=\"将项目导入远程仓库\"><a class=\"anchor\" href=\"#将项目导入远程仓库\">#</a> 将项目导入远程仓库</h2>\n<h3 id=\"查看是否存在远程连接以下此类操作需要进入该项目文件夹\"><a class=\"anchor\" href=\"#查看是否存在远程连接以下此类操作需要进入该项目文件夹\">#</a> 查看是否存在远程连接（以下此类操作需要进入该项目文件夹）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><p>若不存在连接将不会显示任何东西，存在则会说明连接地址<br />\n如果此时已经存在连接，可选择使用以下指令断连</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote remove origin</pre></td></tr></table></figure><h3 id=\"连接到远程仓库\"><a class=\"anchor\" href=\"#连接到远程仓库\">#</a> 连接到远程仓库</h3>\n<p>回到之前创建的远程仓库中，点击 Code-ssh，复制 ssh 地址<br />\n输入以下指令创建远程仓库连接</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin 远程仓库地址</pre></td></tr></table></figure><h3 id=\"推送项目到远程仓库\"><a class=\"anchor\" href=\"#推送项目到远程仓库\">#</a> 推送项目到远程仓库</h3>\n<p>此时可以选择在 Git bash 中输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin main</pre></td></tr></table></figure><p>也可以在 Github Desktop 中，选择推送当前分支到远程仓库<br />\n注：由于虚幻工程较大，此操作需要一定时间，请耐心等待<br />\n如果出现无法推送的情况，则可能需要准备一定的魔法进行连接</p>\n<h1 id=\"github-desktop的使用\"><a class=\"anchor\" href=\"#github-desktop的使用\">#</a> Github Desktop 的使用</h1>\n<h2 id=\"汉化\"><a class=\"anchor\" href=\"#汉化\">#</a> 汉化</h2>\n<p>为了方便使用，你可以找汉化包对其进行汉化</p>\n<h2 id=\"创建分支\"><a class=\"anchor\" href=\"#创建分支\">#</a> 创建分支</h2>\n<p>多人协同时的工作不建议在主分支上进行，可以在 Current branch 中选择创建一个新的分支<br />\n工作确定完成时，可在此选择下方选择合并一个分支到 main</p>\n<h2 id=\"同步与推送\"><a class=\"anchor\" href=\"#同步与推送\">#</a> 同步与推送</h2>\n<p>可以在上方导航栏中选择 Repository，选择推送当前分支到 github 或同步 github 的项目到自己的分支<br />\n也可以直接点击 Publish branch 上传当前分支到 github</p>\n<p>参考文章：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mcmFnbWVudGFyeTEwMDIuZ2l0aHViLmlvLzIwMjMvMDMvMTcvR2l0U3RhcnQv\">Git 初次食用方式</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFWNHkxbTdQQi8/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjAmYW1wO3ZkX3NvdXJjZT03YmIwM2U4NDFkYTE4YjEzNzMwODRiZjc5NTU2OTZjNQ==\">彻底解决 github 克隆和推送时的网络错误</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWtzNHkxcjdLYi8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT03YmIwM2U4NDFkYTE4YjEzNzMwODRiZjc5NTU2OTZjNQ==\">如何在虚幻引擎中使用 GitHub | 虚幻引擎远程团队项目协作</span></p>\n",
            "tags": [
                "虚幻引擎",
                "虚幻引擎",
                "Git",
                "协同开发"
            ]
        },
        {
            "id": "https://github.com/Smartre97/Smartre97.github.io/2023/07/25/%E4%B8%80%E4%B8%AA%E5%B0%9D%E8%AF%95/",
            "url": "https://github.com/Smartre97/Smartre97.github.io/2023/07/25/%E4%B8%80%E4%B8%AA%E5%B0%9D%E8%AF%95/",
            "title": "一个尝试",
            "date_published": "2023-07-24T18:30:48.000Z",
            "content_html": "<p>一个对于博客搭建的文章实验性页面。<br />\n正在对如何搭建博客与更新文章，更新博客版式等进行探索<br />\n后续会更改为 markdown 语法的使用笔记</p>\n<h1 id=\"设置标题\"><a class=\"anchor\" href=\"#设置标题\">#</a> 设置标题</h1>\n<h2 id=\"这算是中标题\"><a class=\"anchor\" href=\"#这算是中标题\">#</a> 这算是中标题</h2>\n<h3 id=\"好的那么这就是小标题\"><a class=\"anchor\" href=\"#好的那么这就是小标题\">#</a> 好的那么这就是小标题</h3>\n<h4 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h4>\n<h5 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h5>\n<h6 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> </h6>\n<p>#######<br />\n好的最大 6 级标题</p>\n<p>代码框这样放：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>那么下面这个。emmm，看来中括号里面的是在网页上显示的内容，而小括号会赋予超链接。<br />\n好的那么在这里放一个 github 官网试试: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLw==\">github</span></p>\n",
            "tags": [
                "杂项",
                "杂项"
            ]
        }
    ]
}